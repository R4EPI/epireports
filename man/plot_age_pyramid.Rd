% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/age-pyramid.R
\name{plot_age_pyramid}
\alias{plot_age_pyramid}
\title{Plot a population pyramid (age-sex) from a dataframe.}
\usage{
plot_age_pyramid(data, age_group = "age_group", split_by = "sex",
  stack_by = split_by, proportional = FALSE, na.rm = FALSE,
  compare_group = 1, show_halfway = TRUE, vertical_lines = FALSE,
  horizontal_lines = TRUE, facet = TRUE, pal = NULL)
}
\arguments{
\item{data}{Your dataframe (e.g. linelist)}

\item{age_group}{the name of a column in the data frame that defines the age
group categories. Defaults to "age_group"}

\item{split_by}{the name of a column in the data frame that defines the
the bivariate column. Defaults to "sex". See NOTE}

\item{stack_by}{the name of the column in the data frame to use for shading
the bars}

\item{proportional}{If \code{TRUE}, bars will represent proportions of cases out
of the entire population. Otherwise (\code{FALSE}, default), bars represent
case counts}

\item{na.rm}{If \code{TRUE}, this removes NA counts from the age groups. Defaults
to \code{TRUE}.}

\item{compare_group}{sdflkjsdlfkjsldkjfl}

\item{show_halfway}{When \code{TRUE} (default), a dashed vertical line will be
added to each of the age bars showing the halfway point for the
un-stratified age group. When \code{FALSE}, no halfway point is marked.}

\item{vertical_lines}{If you would like to add dashed vertical lines to help
visual interpretation of numbers. Default is to not show (\code{FALSE}),
to turn on write \code{TRUE}.}

\item{horizontal_lines}{If \code{TRUE} (default), horizontal dashed lines will
appear behind the bars of the pyramid}

\item{facet}{if \code{TRUE} (default) and the \code{split_by} variables are not binary,
then the different levels will be split into different panels showing the
remainder of the data. When \code{FALSE}, the \code{split_by} variables that are not
part of \code{compare_group} are stacked.}

\item{pal}{a color palette function or vector of colors to be passed to
\code{\link[ggplot2:scale_fill_manual]{ggplot2::scale_fill_manual()}} defaults to the first "qual" palette from
\code{\link[ggplot2:scale_fill_brewer]{ggplot2::scale_fill_brewer()}}.}
}
\description{
Plot a population pyramid (age-sex) from a dataframe.
}
\note{
If the \code{split_by} variable is bivariate (e.g. an indicator for
pregnancy), then the result will show up as a pyramid, otherwise, it will be
presented as several facetted pyramids with with empty bars in the background
indicating the range of the un-facetted data set. Values of \code{spit_by} will
show up as labels at top of each facet.

The theme for this function is \code{\link[ggplot2:theme_classic]{ggplot2::theme_classic()}} with additional
elements as follows:\preformatted{ theme(axis.line.y.left = element_blank(),
       panel.grid.major.y = element_line(lintype = 2)) 
}

Because of a known bug in ggplot2 (\url{https://github.com/tidyverse/ggplot2/issues/3039}),
these theme elements may disappear if you attempt to add any more elements,
so you might want to add these elements in addition.
}
\examples{
library(ggplot2)

set.seed(2018-01-15)
ages <- cut(sample(80, 150, replace = TRUE),
            breaks = c(0, 5, 10, 30, 90), right = FALSE)
sex  <- sample(c("Female", "Male"), 150, replace = TRUE)
gender <- sex
gender[sample(5)] <- "NB"
ill  <- sample(c("case", "non-case"), 150, replace = TRUE)
dat  <- data.frame(AGE              = ages,
                   sex              = factor(sex, c("Male", "Female")),
                   gender           = factor(gender, c("Male", "NB", "Female")),
                   ill              = ill,
                   stringsAsFactors = FALSE)

# Create the age pyramid, stratifying by sex
print(ap   <- plot_age_pyramid(dat, age_group = AGE))

# You can also flip which group is used for comparison
print(ap   <- plot_age_pyramid(dat, age_group = AGE, compare_group = "Female"))

# Create the age pyramid, stratifying by gender, which can include non-binary
print(apg  <- plot_age_pyramid(dat, age_group = AGE, split_by = gender))
print(apg  <- plot_age_pyramid(dat, age_group = AGE, split_by = gender, compare_group = "Female"))

# Remove NA categories with na.rm = TRUE
dat2 <- dat
dat2[1, 1] <- NA
dat2[2, 2] <- NA
dat2[3, 3] <- NA
print(ap   <- plot_age_pyramid(dat2, age_group = AGE))
print(ap   <- plot_age_pyramid(dat2, age_group = AGE, facet = FALSE))
print(ap   <- plot_age_pyramid(dat2, age_group = AGE, na.rm = TRUE))

# Stratify by case definition and customize with ggplot2
ap   <- plot_age_pyramid(dat, age_group = AGE, split_by = ill) +
  theme_bw(base_size = 16) +
  labs(title = "Age groups by case definition")
print(ap)

# Stratify by multiple factors
ap <- plot_age_pyramid(dat,
                       age_group = AGE,
                       split_by = sex,
                       stack_by = ill,
                       vertical_lines = TRUE) +
  labs(title = "Age groups by case definition and sex")
print(ap)

# Display proportions
ap <- plot_age_pyramid(dat,
                       age_group = AGE,
                       split_by = sex,
                       stack_by = ill,
                       proportional = TRUE,
                       vertical_lines = TRUE) +
  labs(title = "Age groups by case definition and sex")
print(ap)

# empty group levels will still be displayed
dat3 <- dat2
dat3[dat$AGE == "[0,5)", "sex"] <- NA
plot_age_pyramid(dat3, age_group = AGE, na.rm = TRUE) 
plot_age_pyramid(dat3, age_group = AGE) 

# if you want to force a single pyramid, use facet = FALSE
plot_age_pyramid(dat3, age_group = AGE, facet = FALSE) 
}
