% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tab_descriptive.R
\name{tab_linelist}
\alias{tab_linelist}
\alias{tab_survey}
\title{Tabulate counts and proportions}
\usage{
tab_linelist(
  x,
  ...,
  strata = NULL,
  keep = TRUE,
  drop = NULL,
  na.rm = TRUE,
  prop_total = FALSE,
  row_total = FALSE,
  col_total = FALSE,
  wide = TRUE,
  transpose = NULL,
  digits = 1,
  pretty = TRUE
)

tab_survey(
  x,
  ...,
  strata = NULL,
  keep = TRUE,
  drop = NULL,
  na.rm = TRUE,
  prop_total = FALSE,
  row_total = FALSE,
  col_total = FALSE,
  wide = TRUE,
  transpose = NULL,
  digits = 1,
  method = "logit",
  deff = FALSE,
  pretty = TRUE
)
}
\arguments{
\item{x}{a \code{\link[=data.frame]{data.frame()}} or \link[srvyr:as_survey_design]{tbl_svy} object}

\item{...}{categorical variables to tabulate}

\item{strata}{a stratifier to split the data}

\item{keep}{a character vector specifying which values to retain in the
tabulation. Defaults to \code{TRUE}, which keeps all the values.}

\item{drop}{a character vector specifying which values to drop in the
tabulation. Defaults to \code{NULL}, which keeps all values.}

\item{na.rm}{When \code{TRUE} (default), missing (NA) values present in \code{var}
will be removed from the data set with a warning, causing a change in
denominator for the tabulations. Setting this to \code{FALSE} creates an
explicit missing value called "(Missing)".}

\item{prop_total}{if \code{TRUE} and \code{strata} is not \code{NULL}, then the totals of the
rows will be reported as proportions of the total data set, otherwise, they
will be proportions within the stratum (default).}

\item{row_total}{create a new column with the total counts for each row of
stratified data.}

\item{col_total}{create a new row with the total counts for each column of
stratified data.}

\item{wide}{if \code{TRUE} (default) and strata is defined, then the results are
presented in a wide table with each stratification counts and estimates in
separate columns. If \code{FALSE}, then the data will be presented in a long
format where the counts and estimates are presented in single columns. This
has no effect if strata is not defined.}

\item{transpose}{if \code{wide = TRUE}, then this will transpose the columns to
the rows, which is useful when you stratify by age group. Default is
\code{NULL}, which will not transpose anything. You have three options for
transpose:
\itemize{
\item \code{transpose = "variable"}: uses the variable column, (dropping values if strata exists).
Use this if you know that your values are all identical or at least
identifiable by the variable name.
\item \code{transpose = "value"}   : uses the value column, (dropping variables if strata exists).
Use this if your values are important and the variable names are
generic placeholders.
\item \code{transpose = "both"}    : combines the variable and value columns.
Use this if both the variables and values are important.
}}

\item{digits}{(survey only) if \code{pretty = FALSE}, this indicates the number
of digits used for proportion and CI}

\item{pretty}{(survey only) if \code{TRUE}, default, the proportion and CI are merged}

\item{method}{(survey only) a method from \code{\link[survey:svyciprop]{survey::svyciprop()}} to calculate
the confidence interval. Defaults to "logit".}

\item{deff}{a logical indicating if the design effect should be reported.
Defaults to \code{TRUE}.}
}
\value{
a \code{\link[tibble:tibble]{tibble::tibble()}} with a column for variables, a column for values,
and counts and proportions. If \code{strata} is not \code{NULL} and \code{wide = TRUE},
then there will be separate columns for each strata for the counts and
proportions. Survey data will report confidence intervals.
}
\description{
Tabulate counts and proportions
}
\examples{
have_packages <- require("dplyr") && require("linelist")
if (have_packages) { withAutoprint({

# Simulating linelist data

linelist     <- gen_data("Measles")
measles_dict <- msf_dict("Measles", compact = FALSE) \%>\%
  select(option_code, option_name, everything())

# Cleaning linelist data
linelist_clean <- clean_variable_spelling(
  x             = linelist,
  wordlists     = filter(measles_dict, !is.na(option_code)),
  spelling_vars = "data_element_shortname",
  sort_by       = "option_order_in_set"
)

# get a descriptive table by sex
tab_linelist(linelist_clean, sex)

# describe prenancy statistics, but remove missing data from the tally
tab_linelist(linelist_clean, trimester, na.rm = TRUE)

# describe by symptom

tab_linelist(linelist_clean, 
             cough, nasal_discharge, severe_oral_lesions,
             transpose = "value")
# describe prenancy statistics, stratifying by vitamin A perscription
tab_linelist(linelist_clean, trimester, sex, strata = prescribed_vitamin_a, 
             na.rm = TRUE, row_total = TRUE)

}) }

library(srvyr)
library(survey)
have_survey_packages <- require("survey") && require("srvyr")
if (have_survey_packages) { withAutoprint({
data(api)

# stratified sample
surv <- apistrat \%>\%
  as_survey_design(strata = stype, weights = pw)

s <- surv \%>\%
  tab_survey(awards, strata = stype, col_total = TRUE, row_total = TRUE, deff = TRUE)
s

# making things pretty
s \%>\%
  # wrap all "n" variables in braces (note space before n).
  augment_redundant(" (n)" = " n") \%>\%
  # relabel all columns containing "prop" to "\% (95\% CI)"
  rename_redundant("\% (95\% CI)"    = ci,
                   "Design Effect" = deff)

# long data
surv \%>\%
  tab_survey(awards, strata = stype, wide = FALSE)

# tabulate binary variables
surv \%>\%
  tab_survey(yr.rnd, sch.wide, awards, keep = "Yes")

# stratify the binary variables
surv \%>\%
  tab_survey(yr.rnd, sch.wide, awards, 
             strata    = stype,
             keep      = "Yes")

# invert the tabulation
surv \%>\%
  tab_survey(yr.rnd, sch.wide, awards, 
             strata    = stype,
             drop      = "Yes",
             deff      = TRUE,
             row_total = TRUE)
}) }
}
